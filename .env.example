DB_URI=postgresql+asyncpg://{}:{}@{}:{}/{}  # your db driver
DB_HOST=postgres # your host. If it running localy, set to localhost/127.0.0.1. If it running in a container, set a service/container_name
DB_PORT=5432 # your port
DB_USER=litestar # db user, you may want to override it
DB_NAME=litestar # your db name, you may want to override it
DB_PASSWORD=litestar # Better use a nice password.


SERVER_HOST=0.0.0.0 # your server host
SERVER_PORT=8080 # your server port. If you override it, do the same in a docker-compose as well
SERVER_CORS=1 # 1 - enable cors, 0 - disable
SERVER_CORS_ORIGINS=["http://localhost", "http://localhost:8080", "http://127.0.0.1", "http://127.0.0.1:8080"] # your origins. May be also https://my-example-frontend.com
SERVER_CORS_METHODS=["OPTIONS", "DELETE", "POST", "GET", "PATCH"] # add PUT if you add it in your application
SERVER_CORS_HEADERS=["Authorization", "Accept", "Content-Type", "If-Modified-Since", "Cache-Control"] # your CORS headers, you may want to extends or remove smth
SERVER_LOG_LEVEL=INFO # your logger level
SERVER_DEBUG=1 # should litestar throw an exception to the terminal and request answer or not
SERVER_TYPE=uvicorn # your server. uvicorn, gunicorn or granian may be used
SERVER_TITLE=Litestar

REDIS_HOST=redis # same as DB_HOST.

CIPHER_ALGORITHM=RS256 # your algorithm. If you setting up HS256, then secret_key and private_key should be the same.
# here is b64 .pem secret and public keys. You should override it by yourself
# if you using RSA, then:
# for private -> openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -outform PEM | base64
# for public -> openssl rsa -in private.pem -pubout -outform PEM | base64
# store it in b64 IS IMPORTANT. It wont work other way, T_T
# this key is 4098 bits.
CIPHER_SECRET_KEY=LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUpRZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQ1N3d2dna29BZ0VBQW9JQ0FRQ2xORk1zTU1Hd3h5Qk4KdC9EejZPdkFJQlk0bkNYTGZRaEN1R0lxK0QxYzhIUWFYeUlQVDlqSDcrcHlPK2JJT3NHR2U3MlBxTmZLbStwVwpLMS9pQzlBS0dLc0MyY2syeS9LRk50bDNoSFpZUFkzZEkvcjNkdFUxZnl5bjEyU3pNK2VaekZidGk4YVAvcVhCCmlabnBNZHdmaUFDNUROYmJTdjkvQ3F3Vzd3enVPbnJMamVhQ1ZSWlBQdlpjSDZ6ZnNHREtSV2crSmZyY29qOVQKQWNqTGZuekd6NmJmdVNpYTNTRWY4aTdsZjdIMTlpTmc4TTVCOWRhMEM1a0Exa2dNYnZsS2Z3Q3E0SUVvRE4zOQppb0xwZ2M3NmZUVGs0S0d4TGJadVgwTUpoM05KQnlZa3ZIUDZINWRkUFQ4ZlEvekZmRUNubFg3bUUxYXd5OXdjCkttWkFBVmFFbXNKQW4vV2xOZkoyZm9JbW1nc3RWZE5KbTcxc0V2ZlVtVE8waExvVWo3TUJzZmhRUnZNdkVwMnMKd1d1aHZFaDNBK05Hc3ZvMlB2SU92Qiswb29PcTVZTnVHdzRyOVFFdVZOZXQzUGVlV05ZMEp0K3hRUW5weEtaWgpzcmZ0WUJVUi9Cb1pWLy8zbkZiZnJ3ckFGc3crNUlHclNyOVdhNmFBYkpaYzJ6RTBjcjljM2FzaUtidmhoTERKCnpZRGY2UWxJTStWZDUzNUNJcjA5eTc4SWhTUHNFRVFXR0JUMFlYQjNVaWNxLzJ2L04vWnphZVVyOTBFY01Ka3YKUmNIOXl5ZHRGOStUbmluRkVwQk4yZzZNODlNOWZzMUNxeS9WVDZjY2ZzeTZwWEF0NnBCQ1RrZ25pcjFaMWNESwpsdlVHdWpMemQ0TFBYdi8wMGNqUlV0ZUE3ZFRxM3dJREFRQUJBb0lDQURtVGJXTkswTTVqNzhtMlVDY3BwN1FyCldxTTdKRjd4Z2dZQ3pjL00rVkhoU1kyQlYxVC96bjBNQytqcElJcnJFMVJqM3RKcEZWLzdDK1loTXNjTXQrSTAKNjdEUUp6VE9Tb1VMOHltWXhFZ0hsK0FZOEpmN1ZkNVJwc1lPSnYzZm1wbDY0bGJpcm42ejBLQU5iVk1jK2VzUgpVck1ybXR3Tm5OTHhiTDJIYmJtL0x0bXZhRVZIRTBIbUh5VkhNdEE0MzlyTzZzQXlLMlptczJ3aUJKR0xVVUJXCjBZRktQakVPM1VNTmZET20xK1p4ZEs0TjdzeUZPZUZBNDMrcnJxdUtwNTVEZWYrVHc5K3A4Rm96UW1IUVNFcjcKaFFvNWtaQzI3a3cwTGlCdGtRdkVEcEtpRFVlQWFCZnFSd3dGL1Z2MGJISWJnNEQ2LzIwWmQycG5pb0JIRnhnTApCTFFUNCtkTUZETVo1SUNaeWJxTVY0eFl0bDJycmk3by9SYzMrOTZDRUpVTm1EL1Vtb2ZHYzl3V0QvOVZVcUh4CjZQZjluWjJrMWNNcmhJNnI0QmlMU3dpTHR0cXo0TUtGRlRyT1ZiOHp2d2tmT205bTN3eUpyaWI4YXV5SWRKUEgKTisxVlI2UHQvUXVPT3BwV2haNVlINjhUVDVnSHlqbnh4RWt5UVdWeW1QN3JOVGMvUnVoV1RhNEZpYjErMzF1SApGUWpEOEppRnJ6MjJQTFdxdEZLTG9UWkdWT05BYzJ3amlBcGszazRGMnEvMHVScVAyU0hhSHNFbW1QamduMTN2ClBONVhoRmpmd3VobGFDL0x4TzIyeHBYK2VlYytZeGZtWjJHRngwemtIUU5WYVBZU3AxVlcrSlQzbHlHam91MkUKdVg4TWY1bkdBSDBEczJpemhIaGhBb0lCQVFEaGh2elplWTJrOU4xeWtoQk5xUFN5YzFEa2JXa2FDZk5xU2dRUwozaVhjZkUwY3B1QzJZWXhaclk5MWd1ZC9RbmZZbFd2ZU9RY0tsZHdNeGw0TXJ0UlZqWllZUFhjMUZUUjMrNDNDCkVXSEdJTmo2RTFQTmY1YmlJVmYwbXdOWmY3Vk1aV2lGTUF3T1Y4M05YQTJ3dGFxa25oLzRLb2FiMjRsbjlrd08KenhjWHhwSGNFcGkzRkFVL3BBOCs0TXVibFcxSjFIUDhCT3FpWjhFUjRTMjhqZlRYdHh3YlRkZW80ZjhTYXA3agp4akpUbHM4RlpMT0plb3ZvcjlqVmR6QVdscVpoTlJJMXpzemFrOFJwT292YTE4dm5qUkxXWkRXWTNDNjlBdlcwCkZxaGRzamFnRnA4QWh4ZGhwaFdRclFvZ0o3Vi9VWEtreHFMWEdwRHZSYXlrQkRtaEFvSUJBUUM3aHNNSUlDTmgKUlp1MmtHb1Fuam5aRGlmTWN1R3F0QmhObFg4dkhuOXVpT0J3VnNodUpuS2ZicWpsSVJzUDVPYlRGZTFjNGRTeQovYkpDT3JpVU9GUUorTFFrWVJSTllXSDExWjdOS0xIcXdHQVFmR0JsU0xxaGIrOEFkZTRQMzYrMUhmZm9yMm9ECjBSdzhIb2xvdlVwdzdKcVNRNkNTRW55MjlobVJlN3YzdkVUTUpJS3g3ZjBWdVJ0SzFkM3N4Y20wY2c1OG1yczUKQjcraUpxbjJOWEF2ZmRvbjN4QW5IS045bGpSN3prdnlMZ0RhOWRFUnIrMHRTbmhiTDVSR0RsRjFTL0Q4ZFRiNAowMGlSNmVpS2Z2WGc0bzV6S0JzRjRSblNhQjU0eGpkdUsxWnpjVTdZTjFqTEtMT0NidElIdHd0c3NpV0NyNUF6ClBzMlFsL3ZQSTlSL0FvSUJBUUM0cWEwVDdXRzd0ZncxT2NBN3RxSldFL0lpZUN2YzlGVHByUjFVemEwMnNsajUKb3ZMUW8yTW1jdVRLbFpzMEtwcXpMdllhQ1p2b1lQakRSUkh4Vkozc1IzaWs5SDlOYWNXQ2tPbHNCSXVJalpEYwpnMExWT3lteWt4YlA1TFdEYlB4b1I0aWp0Y25KWEwvWTdRMFFxay9GWnV4S2FaZTZ1ckh4L0V3ZXZCYnVrdHNQCjFmSlJ4Z1RlTFZtR1pNNlM0SEdTU0hHSDVBYXpZRDFJaEpiTWszZnR3Yk16OERNcng1RHg1WGVnamNMYml0cU0KVWY1b0RYM04wMTY2dTFNV3k5Z0VORTVxM0tBRVFZWkxtM0swaUlvZldQWVpzZ2ZvMkRFMDl0MTB6akNpTjdCZQp1T2NNcVpETmxnNkdYZ215ZHBFNFpOcDRiV1VjdUZZQWRZNTg1akRCQW9JQkFEcFZCeUhsN1Z0NnJaOHllT3ZHCmJEUXFoUkxCd1pTNkJMMU5mWXlJcmhjU0dNNlpFQ3ZEWmZCV0djOThadENnNFhSVDQ4djZxNUVwL1dOQXBOM20KVDYzeVlRYlg4OXJHS2hTd2FIOWs0ME1rcUQwNGt6dXVUZStkdy9pZXRualZtZkI2Ni96RFkvVGYvU3B1VFV2NQpaY2lPc041Q2p4WWhEZzVUcTB4bjh1Wnk5K3VRaDk4VktwNnhQOTRkZkxVRUtXUXAvbnVnSGhEMWFoVGtkZ1lTClJWMWdocFhVZTAvUFJzUHdEMDlic3FBWTAwZEpJOG1lc2VaZXZlV1BmVTMxY2oxTWJCLzd6aWZFZ1ZSeU1GVzAKZklPQnRkSDRiYjk4YiszVldYVTBJMVh2d1NxVDJuVERjcWx2ZGJkakJZNUUwQmIxcTFsbGh6T0ptNlFZd3NtQwpXYjBDZ2dFQVFFMlB1NzloN3BtaFV5QUpTTzNuWHdHaWwvcGpFUFUrVDdtcE5PRmEzbTZyeGF0ak1jSFBaRXlBCkZYUzBRODNKc0tqRGxRcFJ6NFd5K1dIREJkaHF5M0c2Z29NOXZGSStUZ2h3azNIM3ZjUHVvSytZUjVyNVFwSnMKVmJPeHBaMElrOGhOai9uZVZnQ2JCUWwrRkJaRlBWVzdoWEZuYW4zaWRKTk5DWXNQdTNPci9yeklrdFNESUVxagoxY2Y3RmtCR0RBSjF6Z1N1RUxwVjU4cmVvZTcyd2JUNElPT1dhMEpwVElwRndLTDlwWmNqRlM2bE52TllhSm14CmUyY1oxZk51NkhtK1JPNHlSM1pGK1hDK3F3ZUswcmsvQkhiRXAvNkx3b1RyVTFnVEZuc0RjNVFDTDZlTm4vcXAKUFRKZTlsVnlzMEFLZUNFZzZwcGd0SW9CdHYyY0JRPT0KLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo=
CIPHER_PUBLIC_KEY=LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUFwVFJUTEREQnNNY2dUYmZ3OCtqcgp3Q0FXT0p3bHkzMElRcmhpS3ZnOVhQQjBHbDhpRDAvWXgrL3FjanZteURyQmhudTlqNmpYeXB2cVZpdGY0Z3ZRCkNoaXJBdG5KTnN2eWhUYlpkNFIyV0QyTjNTUDY5M2JWTlg4c3A5ZGtzelBubWN4VzdZdkdqLzZsd1ltWjZUSGMKSDRnQXVRelcyMHIvZndxc0Z1OE03anA2eTQzbWdsVVdUejcyWEIrczM3Qmd5a1ZvUGlYNjNLSS9Vd0hJeTM1OAp4cyttMzdrb210MGhIL0l1NVgreDlmWWpZUERPUWZYV3RBdVpBTlpJREc3NVNuOEFxdUNCS0F6ZC9ZcUM2WUhPCituMDA1T0Noc1MyMmJsOURDWWR6U1FjbUpMeHoraCtYWFQwL0gwUDh4WHhBcDVWKzVoTldzTXZjSENwbVFBRlcKaEpyQ1FKLzFwVFh5ZG42Q0pwb0xMVlhUU1p1OWJCTDMxSmt6dElTNkZJK3pBYkg0VUViekx4S2RyTUZyb2J4SQpkd1BqUnJMNk5qN3lEcndmdEtLRHF1V0RiaHNPSy9VQkxsVFhyZHozbmxqV05DYmZzVUVKNmNTbVdiSzM3V0FWCkVmd2FHVmYvOTV4VzM2OEt3QmJNUHVTQnEwcS9WbXVtZ0d5V1hOc3hOSEsvWE4ycklpbTc0WVN3eWMyQTMra0oKU0RQbFhlZCtRaUs5UGN1L0NJVWo3QkJFRmhnVTlHRndkMUluS3Y5ci96ZjJjMm5sSy9kQkhEQ1pMMFhCL2NzbgpiUmZmazU0cHhSS1FUZG9PalBQVFBYN05RcXN2MVUrbkhIN011cVZ3TGVxUVFrNUlKNHE5V2RYQXlwYjFCcm95CjgzZUN6MTcvOU5ISTBWTFhnTzNVNnQ4Q0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo=
CIPHER_ACCESS_TOKEN_EXPIRE_SECONDS=1800 # your access token expire. 1800 seconds that's equal to 30 min.
CIPHER_REFRESH_TOKEN_EXPIRE_SECONDS=604800 # a week, for refresh one.