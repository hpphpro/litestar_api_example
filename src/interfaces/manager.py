from types import TracebackType
from typing import Any, Protocol

from src.interfaces.command import Query, R


class AbstractTransactionManager(Protocol):
    async def send(self, query: Query[Any, R], **kw: Any) -> R: ...
    async def __call__(self, query: Query[Any, R], **kw: Any) -> R: ...
    async def __aexit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...
    async def __aenter__(self) -> "AbstractTransactionManager": ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def create_transaction(self) -> None: ...
    async def close_transaction(self) -> None: ...
