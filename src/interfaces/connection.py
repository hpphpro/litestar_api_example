from __future__ import annotations

from typing import Any, Generator, Protocol


class AbstractAsyncTransaction(Protocol):
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    @property
    def is_valid(self) -> bool: ...
    @property
    def is_active(self) -> bool: ...
    async def __aenter__(self) -> AbstractAsyncConnection: ...
    async def __aexit__(self, *args: Any) -> None: ...
    def __await__(self) -> Generator[None, None, AbstractAsyncTransaction]: ...


class AbstractAsyncConnection(Protocol):
    async def start(self, **kw: Any) -> AbstractAsyncConnection: ...
    async def execute(self, *args: Any, **kw: Any) -> Any: ...
    async def stream(self, *args: Any, **kw: Any) -> Any: ...
    async def close(self) -> None: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    def in_transaction(self) -> bool: ...
    def in_nested_transaction(self) -> bool: ...
    def begin(self) -> AbstractAsyncTransaction: ...
    def begin_nested(self) -> AbstractAsyncTransaction: ...
    @property
    def closed(self) -> bool: ...
    async def __aenter__(self) -> AbstractAsyncConnection: ...
    async def __aexit__(self, *args: Any) -> None: ...
    def __await__(self) -> Generator[None, None, AbstractAsyncConnection]: ...
