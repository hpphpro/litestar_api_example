worker_processes auto;

include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/json;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # here you can set your origins for CORS if you need, or just left default one.

    # map $http_origin $cors_allow_origin {
    #     default "";
    #     "http://localhost" "http://localhost";
    #     "http://localhost:8080" "http://localhost:8080";
    #     "http://127.0.0.1" "http://127.0.0.1";
    #     "http://127.0.0.1:8080" "http://127.0.0.1:8080";
    # }

    # you may want to control compressions on a app-size, if it so, just remove it  ¯\_(ツ)_/¯ 
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2; 
        server_name yourdomain.example.com;

        ssl_certificate your/path/to/cert.pem;
        ssl_certificate_key your/path/to/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        # Diffi-Hellman params. You may want to create it by yourself or just remove it ¯\_(ツ)_/¯ 
        # example_command: (openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048)
        ssl_dhparam /etc/nginx/ssl/dhparam.pem; 

        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload" always;
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Content-Security-Policy "default-src 'self'";

        location /api {


            # You may also want to configure CORS on the nginx-proxy side. 
            # If so, just uncomment it and disable it on the app-side (set to 0 SERVER_CORS variable). ¯\_(ツ)_/¯ 
            # configuring CORS on the nginx side is preferred because it centralizes CORS management, 
            # reduces the application's load, and improves performance by handling OPTIONS requests at the web server level.
    
            # if ($request_method = 'OPTIONS') {
            #     add_header 'Access-Control-Allow-Origin' $cors_allow_origin;
            #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PATCH';
            #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept';
            #     add_header 'Access-Control-Allow-Credentials' 'true'; 
            #     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            #     add_header 'Access-Control-Max-Age' 86400;
            #     add_header 'Content-Type' 'text/plain charset=UTF-8';
            #     add_header 'Content-Length' 0;
            #     return 204;
            # }

            # add_header 'Access-Control-Allow-Origin' $cors_allow_origin;
            # add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PATCH';
            # add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Accept';
            # add_header 'Access-Control-Allow-Credentials' 'true';
            # add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    
            proxy_pass http://backend:8080; # or external-host:external-port if nginx in a different network. If not, port should be internal (also what you set in a .env file)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # you may also extend that static files types
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            access_log off;
        }
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

}